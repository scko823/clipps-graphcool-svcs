# Welcome to Graphcool!
#
# This file is the main config file for your Graphcool Service.
# It's very minimal at this point and uses default values.
# We've included a hello world function here.
# Just run `graphcool deploy` to have the first running Graphcool Service.
#
# Check out some examples:
#    https://github.com/graphcool/framework/tree/master/examples
#
# Here are the reference docs of this definition format:
# https://www.graph.cool/docs/reference/service-definition/graphcool.yml-foatho8aip
#
# Happy Coding!


# In the types.graphql you define your data schema
types: ./types/types.graphql


functions:
  signup:
    type: resolver
    schema: ./resolvers/signup.graphql
    handler:
      code: ./resolvers/signup.js

  sendValidationEmail:
    type: operationAfter
    operation: User.create
    handler:
      code:
        src: ./resolvers/sendValidationEmail.js
        environment:
          MAILGUN_DOMAIN: mg.scko823.host
          MAILGUN_API_KEY: ${env:MAILGUN_API_KEY}

  validateEmail:
    type: resolver
    schema: ./resolvers/validateEmail.graphql
    handler:
      code: ./resolvers/validateEmail.js

  authenticate:
    type: resolver
    schema: ./resolvers/authenticate.graphql
    handler:
      code: ./resolvers/authenticate.js

  requestPasswordReset:
    type: resolver
    schema: ./resolvers/requestPasswordReset.graphql
    handler:
      code:
        src: ./resolvers/requestPasswordReset.js
        environment:
          MAILGUN_DOMAIN: mg.scko823.host
          MAILGUN_API_KEY: ${env:MAILGUN_API_KEY}

  resetAndUpdatePassword:
    type: resolver
    schema: ./resolvers/resetPassword.graphql
    handler:
      code: ./resolvers/resetPassword.js


# Model/Relation permissions are used to limit the API access
# To take the burden of thinking about those while development, we
# preconfigured the wildcard ("*") permission that allows everything
# Read more here:
# https://www.graph.cool/docs/reference/auth/authorization/overview-iegoo0heez
permissions:
  - operation: User.create
  - operation: User.read
  - operation: User.update
    # authenticated: true
  - operation: Clip.read
  - operation: Clip.create
    authenticated: true
  - operation: Clipboard.read
    authenticated: true
  - operation: ClipOwner.connect
    authenticated: true
  - operation: ClipboardClips.connect
    authenticated: true
  # - operation: "*"


# Your root tokens used for functions to get full access to the API
# Read more here:
# https://www.graph.cool/docs/reference/auth/authentication/authentication-tokens-eip7ahqu5o
# rootTokens:
#   - mytoken

